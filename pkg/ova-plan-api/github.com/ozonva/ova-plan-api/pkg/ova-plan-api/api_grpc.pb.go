// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_plan_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanApiClient is the client API for PlanApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanApiClient interface {
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanResponse, error)
	DescribePlan(ctx context.Context, in *DescribePlanRequest, opts ...grpc.CallOption) (*DescribePlanResponse, error)
	ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error)
	RemovePlan(ctx context.Context, in *RemovePlanRequest, opts ...grpc.CallOption) (*RemovePlanResponse, error)
}

type planApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanApiClient(cc grpc.ClientConnInterface) PlanApiClient {
	return &planApiClient{cc}
}

func (c *planApiClient) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanResponse, error) {
	out := new(CreatePlanResponse)
	err := c.cc.Invoke(ctx, "/ova.plan.api.PlanApi/CreatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planApiClient) DescribePlan(ctx context.Context, in *DescribePlanRequest, opts ...grpc.CallOption) (*DescribePlanResponse, error) {
	out := new(DescribePlanResponse)
	err := c.cc.Invoke(ctx, "/ova.plan.api.PlanApi/DescribePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planApiClient) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error) {
	out := new(ListPlansResponse)
	err := c.cc.Invoke(ctx, "/ova.plan.api.PlanApi/ListPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planApiClient) RemovePlan(ctx context.Context, in *RemovePlanRequest, opts ...grpc.CallOption) (*RemovePlanResponse, error) {
	out := new(RemovePlanResponse)
	err := c.cc.Invoke(ctx, "/ova.plan.api.PlanApi/RemovePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanApiServer is the server API for PlanApi service.
// All implementations must embed UnimplementedPlanApiServer
// for forward compatibility
type PlanApiServer interface {
	CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error)
	DescribePlan(context.Context, *DescribePlanRequest) (*DescribePlanResponse, error)
	ListPlans(context.Context, *ListPlansRequest) (*ListPlansResponse, error)
	RemovePlan(context.Context, *RemovePlanRequest) (*RemovePlanResponse, error)
	mustEmbedUnimplementedPlanApiServer()
}

// UnimplementedPlanApiServer must be embedded to have forward compatible implementations.
type UnimplementedPlanApiServer struct {
}

func (UnimplementedPlanApiServer) CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedPlanApiServer) DescribePlan(context.Context, *DescribePlanRequest) (*DescribePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePlan not implemented")
}
func (UnimplementedPlanApiServer) ListPlans(context.Context, *ListPlansRequest) (*ListPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedPlanApiServer) RemovePlan(context.Context, *RemovePlanRequest) (*RemovePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlan not implemented")
}
func (UnimplementedPlanApiServer) mustEmbedUnimplementedPlanApiServer() {}

// UnsafePlanApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanApiServer will
// result in compilation errors.
type UnsafePlanApiServer interface {
	mustEmbedUnimplementedPlanApiServer()
}

func RegisterPlanApiServer(s grpc.ServiceRegistrar, srv PlanApiServer) {
	s.RegisterService(&PlanApi_ServiceDesc, srv)
}

func _PlanApi_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanApiServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.plan.api.PlanApi/CreatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanApiServer).CreatePlan(ctx, req.(*CreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanApi_DescribePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanApiServer).DescribePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.plan.api.PlanApi/DescribePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanApiServer).DescribePlan(ctx, req.(*DescribePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanApi_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanApiServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.plan.api.PlanApi/ListPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanApiServer).ListPlans(ctx, req.(*ListPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanApi_RemovePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanApiServer).RemovePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.plan.api.PlanApi/RemovePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanApiServer).RemovePlan(ctx, req.(*RemovePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanApi_ServiceDesc is the grpc.ServiceDesc for PlanApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.plan.api.PlanApi",
	HandlerType: (*PlanApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlan",
			Handler:    _PlanApi_CreatePlan_Handler,
		},
		{
			MethodName: "DescribePlan",
			Handler:    _PlanApi_DescribePlan_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _PlanApi_ListPlans_Handler,
		},
		{
			MethodName: "RemovePlan",
			Handler:    _PlanApi_RemovePlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ova-plan-api/api.proto",
}
